******************************************************************************************************************************
*                                                                                                                            *
*                                             FUNDAMENTALS OF C FOR AVR                                                      *
*                                                                                                                            *
******************************************************************************************************************************

@GOALS:     - Local and global variables;
            - How to use complex data types;
            - Pointers and how to use them;
            - Common C 'traps';
            - Basic keywords in C;
            - Specific extensions of C for AVR.


1. Variables range: Global
   =======================

   @BRIEF   :   Global variables are accessible from any place of the program, they are declared out of any 
                block or function, e.g.
                @CODE:
                        int x;
                        float y;

                        int main()
                        {

                        }
               @ENDCODE

               Such variables are visible from the point of compiler unit (source code), in which they have been 
               declared. If we want to make them visible in other files, we need to add keyword 'extern'.

   @NOTE    :   In the world of microcontrollers, global variables are EVIL. They are only used in the case of 
                data transfer between interrupt service routine functions and the rest of the program.


2. Variables range: Local
   ======================

   @BRIEF   :   Local variables are declared inside function or block of the program.
                There are two consequences of this:
                - Access to such a variable is only possible from inside function or block, in which
                  variable was declared;
                - Lifetime of local variable is limitied, after end of the function, variable is destroyed
                  (except constant variables).
                @CODE:
                        void test()
                        {
                            int x;
                            while(1)
                            {
                                int y;
                                y = 1 + x; // OK, x and y are declared
                            }
                            y++;           // Error, y does not exist 
                        }
                @ENDCODE

   @WATCHOUT:   @CODE:
                        int* square(int x)
                        {
                            int k = x * x;
                            return &k;
                        }
                @ENDCODE
                This function returns address of a local variable 'k'. Problem is, that this variables
                does not exist after end of this function, what means the returned address is incorrect.
                Remember to not return address of the local variable. 


3. Pointers
   ========

   @BRIEF   :   Pointers are variables which store addresses of other variables (or function, or generally objects).
                Their size (amount of occupied memory) depends on the address length in given type of processor.
                AVR microcontrollers, which have up to 64kB memory, use 16-bit addresses, larger one use 24-bit addresses.
                For this reason, in AVRs there are two types of pointers:
                16-bit - they allow to data addressing in the range of first 64kB of memory and function addressing
                         in the range of first 128kB of memory.
                24-bit - they additionally unify addressing spaces FLASH and SRAM.

                Variables are stored in the memory, so the name of the variable is the address of memory cell in which
                given variable is stored. So, it can be said, that variable name is pointer to the memory space in which
                its value is stored. 

   
   @STRUCTURE POINTER   :   @CODE:
                                    struct point
                                    {
                                        int x;
                                        int y;
                                    } ;

                                    struct point point;
                                    struct point *pptr;
                                    pptr = &point;

                                    pptr->x = 11;   // equivalent to: (*pptr).x = 11;
                            @ENDCODE


   @REFERENCE           :   @CODE:
                                    void test(int *x)   // calling: test(&x);
                                    {
                                        *x = (*x) + 1;
                                    }
                            @ENDCODE


   @VOID POINTER        :   @CODE:
                                    void *ptr;
                                    *ptr++;         // Warning: dereferencing 'void*' pointer
                                    *(char*)ptr++;  // Ok, void pointer is casted to: pointer to char type
                            @ENDCODE

                            

